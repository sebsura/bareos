#!/bin/bash

#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2024-2024 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.

set -e
set -o pipefail
set -u
#
# Run a simple backup
#
TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-bareos-fd

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
#shellcheck source=functions
. functions

VolName=TestVolume001

start_test

cat <<END_OF_DATA >"$tmp/bconcmds"
@$out /dev/null
messages
@$out $log_home/create-full-1.out
setdebug level=200 all trace=1
label volume=$VolName storage=File pool=Full
run job=$JobName yes level=Full
wait
status director
status client
status storage=File
messages
@$out $log_home/create-full-2.out
run job=$JobName yes level=Full
wait
status director
status client
status storage=File
messages
@$out $log_home/jobs.out
list jobs
quit
END_OF_DATA

run_bconsole
check_for_zombie_jobs storage=File

dedupconf=$(tool "bdedup-conf")

blocksize=512
config=$($dedupconf read < "storage/$VolName/config")
sizes_ok=$(echo "$config" | jq ".data_files | map(.block_size) | sort | . == [1, $blocksize]")

if ! [[ "$sizes_ok" = "true" ]]; then
    blocksizes="$(echo "$config" | jq -r ".data_files | map(.block_size) | sort | @sh")"
    echo "Bad sizes in config: $blocksizes; expected: 1 $blocksize"
    estat=1
fi

drydedup=$(tool "drydedup")
dedupable=$(echo "$config" | jq '.data_files | map(select(.block_size != 1))')

i=0
while :
do
    info=$(echo "$dedupable" | jq ".[$i]")
    if [[ "$info" = "null" ]]; then
	break
    fi
    file="storage/$VolName/$(echo "$info" | jq -r '.path')"
    bs=$(echo "$info" | jq '.block_size')
    size=$(echo "$info" | jq '.size')
    result=($($drydedup "$file" -b "$bs" -m -s "$size"))
    if ! ((result[0] >= result[1] * 2)); then
	echo -e "$file: Did not dedup enough (from ${result[0]} to ${result[1]} is less than 50%)." >&2
	estat=1
    fi
    i=$((i + 1))
done

expect_grep "Start Backup JobId 1" \
	    "$log_home/create-full-1.out" \
	    "Did not create backup job with id 1."

expect_grep "Backup OK" \
	    "$log_home/create-full-1.out" \
	    "Backup was not created correctly."

expect_grep "Start Backup JobId 2" \
	    "$log_home/create-full-2.out" \
	    "Did not create backup job with id 1."

expect_grep "Backup OK" \
	    "$log_home/create-full-2.out" \
	    "Backup was not created correctly."

end_test
