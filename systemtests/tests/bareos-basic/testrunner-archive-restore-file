#!/bin/bash
set -e
set -o pipefail
set -u
#
# Run a simple backup
#   then restore it.
#
TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-bareos-fd

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions

start_test

cat <<END_OF_DATA >"$tmp/bconcmds"
@$out /dev/null
messages
@$out $tmp/log1.out
setdebug level=100 storage=File
run job=$JobName yes
status director
status client
status storage=File
@$out $tmp/should-fail.out
wait
messages
restore archive client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores \
	file=$(pwd)/tmp/data/build/src/tests/Makefile \
	done yes
update jobid=1 jobtype=A
@$out $tmp/should-work.out
wait
messages
restore archive client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores \
	file=$(pwd)/tmp/data/build/src/tests/Makefile \
	done yes
wait
messages
quit
END_OF_DATA

run_bconsole
check_for_zombie_jobs storage=File

expect_grep "No database record found for:" \
	    "$tmp/should-fail.out" \
	    "Expected failure; found success"

expect_grep "1 file selected to be restored." \
	    "$tmp/should-work.out" \
	    "Expected success; found failure"

check_two_logs
if ! cmp -s "$tmp/bareos-restores/$(pwd)/tmp/data/build/src/tests/Makefile" \
     "$(pwd)/tmp/data/build/src/tests/Makefile"; then
    exit 2
fi

#check_restore_diff "${BackupDirectory}"
end_test
