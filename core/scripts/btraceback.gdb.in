print my_name
print exename
print exepath
print catalog_db
print kBareosVersionStrings.FullWithDate
print kBareosVersionStrings.BinaryInfo
print host_name
show env TestName
dir "@srcdir@"
python
def format_args(frame, args):
      result = ""
      first = True
      for arg in args:
            if first:
                  result += "{}={}".format(arg.print_name, arg.value(frame))
                  first = False
            else:
                  result += ", {}={}".format(arg.print_name, arg.value(frame))

      return result

def read_lines(path, start, end):
      lines = []
      current = 1

      try:
            with open(path, 'r') as f:
                  while current <= end:
                        line = f.readline()
                        if current >= start:
                              lines.append([current, line])
                        current += 1
      except:
            pass

      return lines

def backtrace():
      first_frame = frame = gdb.newest_frame()

      level = 0
      while frame:
            frame.select()

            variables = []
            arguments = []
            global_vars = []
            static_vars = []
            try:
                  # frame.block() will throw if gdb does not have block information
                  # available for the frame
                  block = frame.block()
                  while block:
                        for symbol in block:
                              if symbol.is_variable:
                                    variables.append(symbol)
                              elif symbol.is_argument:
                                    arguments.append(symbol)

                        block = block.superblock

                  gblock = frame.block().global_block
                  sblock = frame.block().static_block

                  for symbol in gblock:
                        if symbol.is_variable:
                              global_vars.append(symbol)

                  for symbol in sblock:
                        if symbol.is_variable:
                              static_vars.append(symbol)

            except:
                  pass


            func = frame.function()
            if func:
                  func_name = "{}".fomat(func.print_name)
            else:
                  func_name = "<unkown>"

            sal = frame.find_sal()
            sym = sal.symtab

            if sym:
                  filepos = "{}:{}".format(sym.filename, sal.line)
            elif func:
                  filepos = "{}:{}".format(func.symtab.filename, func.line)
            else:
                  filepos = "<unknown>"

            if arguments:
                  arg_str = " ({})".format(format_args(frame, arguments))
            else:
                  arg_str = ""

            print("#{}  0x{:016X} in {}{} at {}".format(#frame.level(),
                  level, frame.pc(), func_name, arg_str, filepos))

            print("LOCALS:")
            for var in variables:
                  print("{} = {}".format(var.print_name, var.value(frame)))
            print("GLOBALS:")
            for var in global_vars:
                  print("{} = {}".format(var.print_name, var.value(frame)))
            print("STATICS:")
            for var in static_vars:
                  print("{} = {}".format(var.print_name, var.value(frame)))
            print("WHERE:")
            if sym:
                  linum = sal.line
                  path = sym.fullname()
                  start = linum - 5
                  end = linum + 5
                  print("{}:".format(path))
                  lines = read_lines(path, start, end)
                  content = ""
                  for number, line in lines:
                        content += "{} {:4}: {}".format(">>" if number == linum else "  ", number, line)
                  print(content)
            else:
                  print("location not found {}".format(sal))
            print("REGISTERS:")
            gdb.execute("info registers")

            frame = frame.older()
            level += 1

      first_frame.select()

# current_thread = gdb.selected_thread()
# for thread in gdb.selected_inferior().threads():
      # thread.switch()
      # print("{}Thread {}{}".format("(Current) " if thread == current_thread else "",
                                          # thread.num,
                                         # " ({})".format(thread.details) if thread.details else ""))
backtrace()
end
detach
quit
