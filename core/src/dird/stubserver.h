/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUBSERVER_H_
#define JSONRPC_CPP_STUB_STUBSERVER_H_

#include <jsonrpccpp/server.h>

class StubServer : public jsonrpc::AbstractServer<StubServer>
{
    public:
        StubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<StubServer>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("list_client", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "name",jsonrpc::JSON_STRING, NULL), &StubServer::list_clientI);
            this->bindAndAddMethod(jsonrpc::Procedure("list_clients", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &StubServer::list_clientsI);
            this->bindAndAddMethod(jsonrpc::Procedure("list_filesets", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &StubServer::list_filesetsI);
            this->bindAndAddMethod(jsonrpc::Procedure("list_fileset", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "jobid",jsonrpc::JSON_INTEGER,"jobname",jsonrpc::JSON_STRING, NULL), &StubServer::list_filesetI);
            this->bindAndAddMethod(jsonrpc::Procedure("list_restores", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT,  NULL), &StubServer::list_restoresI);
            this->bindAndAddMethod(jsonrpc::Procedure("restore", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "client",jsonrpc::JSON_STRING,"jobid",jsonrpc::JSON_INTEGER,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::restoreI);
            this->bindAndAddMethod(jsonrpc::Procedure("cd", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "path",jsonrpc::JSON_STRING,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::cdI);
            this->bindAndAddMethod(jsonrpc::Procedure("ls", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "limit",jsonrpc::JSON_INTEGER,"offset",jsonrpc::JSON_INTEGER,"path",jsonrpc::JSON_STRING,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::lsI);
            this->bindAndAddMethod(jsonrpc::Procedure("lscount", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "path",jsonrpc::JSON_STRING,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::lscountI);
            this->bindAndAddMethod(jsonrpc::Procedure("mark", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "files",jsonrpc::JSON_ARRAY,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::markI);
            this->bindAndAddMethod(jsonrpc::Procedure("unmark", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "files",jsonrpc::JSON_ARRAY,"restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::unmarkI);
            this->bindAndAddMethod(jsonrpc::Procedure("done", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::doneI);
            this->bindAndAddMethod(jsonrpc::Procedure("commitrestore", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::commitrestoreI);
            this->bindAndAddMethod(jsonrpc::Procedure("cancelrestore", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "restoreid",jsonrpc::JSON_INTEGER, NULL), &StubServer::cancelrestoreI);
        }

        inline virtual void list_clientI(const Json::Value &request, Json::Value &response)
        {
            response = this->list_client(request["name"].asString());
        }
        inline virtual void list_clientsI(const Json::Value &/*request*/, Json::Value &response)
        {
            response = this->list_clients();
        }
        inline virtual void list_filesetsI(const Json::Value &/*request*/, Json::Value &response)
        {
            response = this->list_filesets();
        }
        inline virtual void list_filesetI(const Json::Value &request, Json::Value &response)
        {
            response = this->list_fileset(request["jobid"].asInt(), request["jobname"].asString());
        }
        inline virtual void list_restoresI(const Json::Value &/*request*/, Json::Value &response)
        {
            response = this->list_restores();
        }
        inline virtual void restoreI(const Json::Value &request, Json::Value &response)
        {
            response = this->restore(request["client"].asString(), request["jobid"].asInt(), request["restoreid"].asInt());
        }
        inline virtual void cdI(const Json::Value &request, Json::Value &response)
        {
            response = this->cd(request["path"].asString(), request["restoreid"].asInt());
        }
        inline virtual void lsI(const Json::Value &request, Json::Value &response)
        {
            response = this->ls(request["limit"].asInt(), request["offset"].asInt(), request["path"].asString(), request["restoreid"].asInt());
        }
        inline virtual void lscountI(const Json::Value &request, Json::Value &response)
        {
            response = this->lscount(request["path"].asString(), request["restoreid"].asInt());
        }
        inline virtual void markI(const Json::Value &request, Json::Value &response)
        {
            response = this->mark(request["files"], request["restoreid"].asInt());
        }
        inline virtual void unmarkI(const Json::Value &request, Json::Value &response)
        {
            response = this->unmark(request["files"], request["restoreid"].asInt());
        }
        inline virtual void doneI(const Json::Value &request, Json::Value &response)
        {
            response = this->done(request["restoreid"].asInt());
        }
        inline virtual void commitrestoreI(const Json::Value &request, Json::Value &response)
        {
            response = this->commitrestore(request["restoreid"].asInt());
        }
        inline virtual void cancelrestoreI(const Json::Value &request, Json::Value &response)
        {
            response = this->cancelrestore(request["restoreid"].asInt());
        }
        virtual Json::Value list_client(const std::string& name) = 0;
        virtual Json::Value list_clients() = 0;
        virtual Json::Value list_filesets() = 0;
        virtual Json::Value list_fileset(int jobid, const std::string& jobname) = 0;
        virtual Json::Value list_restores() = 0;
        virtual Json::Value restore(const std::string& client, int jobid, int restoreid) = 0;
        virtual Json::Value cd(const std::string& path, int restoreid) = 0;
        virtual Json::Value ls(int limit, int offset, const std::string& path, int restoreid) = 0;
        virtual Json::Value lscount(const std::string& path, int restoreid) = 0;
        virtual Json::Value mark(const Json::Value& files, int restoreid) = 0;
        virtual Json::Value unmark(const Json::Value& files, int restoreid) = 0;
        virtual Json::Value done(int restoreid) = 0;
        virtual Json::Value commitrestore(int restoreid) = 0;
        virtual Json::Value cancelrestore(int restoreid) = 0;
};

#endif //JSONRPC_CPP_STUB_STUBSERVER_H_
